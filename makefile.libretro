DEBUG=0
#set later according to platform
IS_X86 = 0
TARGET = mame
# extension for executables
EXE = .so

GCC_DEFINES := -Wno-sign-compare -Wunused -Wpointer-arith -Waggregate-return -Wshadow

ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
   platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
   platform = win
endif
endif

# system platform
system_platform = unix
ifeq ($(shell uname -a),)
EXE_EXT = .exe
   system_platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
   system_platform = osx
else ifneq ($(findstring MINGW,$(shell uname -a)),)
   system_platform = win
endif

ifeq ($(platform), unix)
   EXE = .so
   TARGET := libretro
   fpic := -fPIC
   SHARED := -shared -Wl,--version-script=src/libretro/link.T -Wl,-no-undefined
   ENDIANNESS_DEFINES := -DLSB_FIRST
   IS_X86 = 1
else ifeq ($(platform), osx)
   EXE = .dylib
   TARGET := libretro
   fpic := -fPIC
   SHARED := -dynamiclib
   ENDIANNESS_DEFINES := -DLSB_FIRST
   IS_X86 = 1
else ifeq ($(platform), ps3)
   EXE = .a
   TARGET := libretro
   CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
   AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
   ENDIANNESS_DEFINES :=
   PLATFORM_DEFINES := -D__CELLOS_LV2__ -D__ppc__
   HAVE_RZLIB := 1
else ifeq ($(platform), sncps3)
   EXE = .a
   TARGET := libretro
   CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
   AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe
   CFLAGS += -DWORDS_BIGENDIAN=1
   GCC_DEFINES := 
   PLATFORM_DEFINES := -D__CELLOS_LV2__ -D__ppc__
   HAVE_RZLIB := 1
else ifeq ($(platform), psl1ght)
   EXE = .a
   TARGET := libretro
   CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
   AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
   CFLAGS += -DWORDS_BIGENDIAN=1
   GCC_DEFINES := 
   PLATFORM_DEFINES := -D__CELLOS_LV2__ -D__ppc__
   HAVE_RZLIB := 1
else ifeq ($(platform), xenon)
   EXE = .a
   TARGET := libretro
   CC = xenon-gcc$(EXE_EXT)
   AR = xenon-ar$(EXE_EXT)
   CFLAGS += -D__LIBXENON__ -m32 -D__ppc__
   PLATFORM_DEFINES := -D__LIBXENON__ -D__ppc_
else ifeq ($(platform), ngc)
   EXE = .a
   TARGET := libretro
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float
   HAVE_RZLIB := 1
else ifeq ($(platform), wii)
   EXE = .a
   TARGET := libretro
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES += -DGEKKO _DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float
   HAVE_RZLIB := 1
else
   EXE = .dll
   TARGET := retro
   CC = gcc
   SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=src/libretro/link.T
   CFLAGS += -D__WIN32__ -D__WIN32_LIBRETRO__ -Wno-missing-field-initializers
   ENDIANNESS_DEFINES := -DLSB_FIRST
   IS_X86 = 1
endif

ifeq ($(IS_X86), 1)
X86_DEFINES = -Dasm="__asm__ __volatile__"
CFLAGS +=  $(X86_DEFINES)
endif

ifeq ($(DEBUG), 1)
CFLAGS += -O0 -g
else
CFLAGS += -O3
endif


# set this the operating system you're building for
# (actually you'll probably need your own main makefile anyways)
# MAMEOS = msdos
MAMEOS = libretro

# CPU core include paths
VPATH=src $(wildcard src/cpu/*)

# compiler, linker and utilities
MD = @mkdir
RM = @rm -f

EMULATOR = $(TARGET)$(EXE)


# removed -DMAME_FASTSOUND more like DMAME_LESSSOUND
DEFS = -DGP2X -DALIGN_INTS -DALIGN_SHORTS -DINLINE="static __inline" $(X86_DEFINES) -DMAME_UNDERCLOCK -DENABLE_AUTOFIRE -DBIGCASE -D__LIBRETRO__ $(ENDIANNESS_DEFINES)



LIBS = -lm -lpthread

OBJ = obj_$(TARGET)_$(MAMEOS)

ifeq ($(HAVE_RZLIB),)
ZLIB_INCLUDE := -Isrc/zlib
endif


CFLAGS += -ffast-math $(fpic) $(PLATFORM_DEFINES) -Isrc -Isrc/$(MAMEOS) $(ZLIB_INCLUDE) $(GCC_DEFINES)

OBJDIRS = $(OBJ) $(OBJ)/cpu $(OBJ)/sound $(OBJ)/$(MAMEOS) \
	$(OBJ)/drivers $(OBJ)/machine $(OBJ)/vidhrdw $(OBJ)/sndhrdw $(OBJ)/zlib

all:	maketree $(EMULATOR)

# include the various .mak files
include src/core.mak
include src/mame.mak
include src/rules.mak
include src/sound.mak
include src/$(MAMEOS)/$(MAMEOS).mak

# combine the various definitions to one
CDEFS = $(DEFS) $(COREDEFS) $(CPUDEFS) $(SOUNDDEFS)

ifeq ($(HAVE_RZLIB),1)
OBJECTS_COMBINED := $(COREOBJS) $(OSOBJS) $(DRVOBJS)
else
OBJECTS_COMBINED := $(ZLIBOBJS) $(COREOBJS) $(OSOBJS) $(DRVOBJS)
endif

$(EMULATOR): $(OBJECTS_COMBINED)
ifeq ($(platform), ps3)
	$(AR) rcs $@ $(OBJECTS_COMBINED)
else ifeq ($(platform), sncps3)
	$(AR) rcs $@ $(OBJECTS_COMBINED)
else ifeq ($(platform), psl1ght)
	$(AR) rcs $@ $(OBJECTS_COMBINED)
else ifeq ($(platform), xenon)
	$(AR) rcs $@ $(OBJECTS_COMBINED)
else ifeq ($(platform), ngc)
	$(AR) rcs $@ $(OBJECTS_COMBINED)
else ifeq ($(platform), wii)
	$(AR) rcs $@ $(OBJECTS_COMBINED)
else
	@echo Linking $@...
	@$(CC) $(SHARED) $(LDFLAGS) $(LIBS) $(OBJECTS_COMBINED) -o $@
endif

$(OBJ)/%.o: src/%.c
	@echo Compiling $<...
	@$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@

$(OBJ)/%.o: src/%.s
	@echo Compiling $<...
	@$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@

$(OBJ)/%.o: src/%.S
	@echo Compiling $<...
	@$(CC) $(CDEFS) $(CFLAGS) -c $< -o $@

$(sort $(OBJDIRS)):
	$(MD) $@

maketree: $(sort $(OBJDIRS))

clean:
	$(RM) -r $(OBJ)
	$(RM) $(EMULATOR)
